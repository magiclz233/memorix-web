/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as FrontRouteImport } from './pages/front/route'
import { Route as FrontTopicImport } from './pages/front/topic'
import { Route as FrontLiveImport } from './pages/front/live'

// Create/Update Routes

const FrontRouteRoute = FrontRouteImport.update({
  id: '/front',
  path: '/front',
  getParentRoute: () => rootRoute,
} as any)

const FrontTopicRoute = FrontTopicImport.update({
  id: '/topic',
  path: '/topic',
  getParentRoute: () => FrontRouteRoute,
} as any)

const FrontLiveRoute = FrontLiveImport.update({
  id: '/live',
  path: '/live',
  getParentRoute: () => FrontRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/front': {
      id: '/front'
      path: '/front'
      fullPath: '/front'
      preLoaderRoute: typeof FrontRouteImport
      parentRoute: typeof rootRoute
    }
    '/front/live': {
      id: '/front/live'
      path: '/live'
      fullPath: '/front/live'
      preLoaderRoute: typeof FrontLiveImport
      parentRoute: typeof FrontRouteImport
    }
    '/front/topic': {
      id: '/front/topic'
      path: '/topic'
      fullPath: '/front/topic'
      preLoaderRoute: typeof FrontTopicImport
      parentRoute: typeof FrontRouteImport
    }
  }
}

// Create and export the route tree

interface FrontRouteRouteChildren {
  FrontLiveRoute: typeof FrontLiveRoute
  FrontTopicRoute: typeof FrontTopicRoute
}

const FrontRouteRouteChildren: FrontRouteRouteChildren = {
  FrontLiveRoute: FrontLiveRoute,
  FrontTopicRoute: FrontTopicRoute,
}

const FrontRouteRouteWithChildren = FrontRouteRoute._addFileChildren(
  FrontRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/front': typeof FrontRouteRouteWithChildren
  '/front/live': typeof FrontLiveRoute
  '/front/topic': typeof FrontTopicRoute
}

export interface FileRoutesByTo {
  '/front': typeof FrontRouteRouteWithChildren
  '/front/live': typeof FrontLiveRoute
  '/front/topic': typeof FrontTopicRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/front': typeof FrontRouteRouteWithChildren
  '/front/live': typeof FrontLiveRoute
  '/front/topic': typeof FrontTopicRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/front' | '/front/live' | '/front/topic'
  fileRoutesByTo: FileRoutesByTo
  to: '/front' | '/front/live' | '/front/topic'
  id: '__root__' | '/front' | '/front/live' | '/front/topic'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  FrontRouteRoute: typeof FrontRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  FrontRouteRoute: FrontRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/front"
      ]
    },
    "/front": {
      "filePath": "front/route.tsx",
      "children": [
        "/front/live",
        "/front/topic"
      ]
    },
    "/front/live": {
      "filePath": "front/live.tsx",
      "parent": "/front"
    },
    "/front/topic": {
      "filePath": "front/topic.tsx",
      "parent": "/front"
    }
  }
}
ROUTE_MANIFEST_END */
